/*** Generated by streamline 0.2.5 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ (function() {
/*     3 */   this.include = function() {
/*     4 */     var db;
/*     5 */     this.enable("serve jquery");
/*     6 */     this.use(this.express.static(__dirname));
/*     7 */     this.include("dotcloud");
/*     8 */     db = this.include("db");
/*     9 */     this.get({
/*    10 */       "/": function() {
/*    11 */         this.response.contentType("text/html");
/*    12 */         return this.response.sendfile("index.html");
                  }
                });
/*    15 */     this.get({
/*    16 */       "/start": function() {
/*    17 */         return this.render("start");
                  }
                });
/*    20 */     this.get({
/*    21 */       "/new": function() {
/*    22 */         return this.response.redirect(("/#" + require("uuid-pure").newId(10, 62)));
                  }
                });
/*    25 */     this.view({
/*    26 */       start: function() {
/*    27 */         div({
/*    28 */           id: "topnav_wrap"
/*    29 */         }, function() {
/*    30 */           return div({
/*    31 */             id: "navigation"
                      });
                    });
/*    34 */         return div({
/*    35 */           id: "intro-left"
/*    36 */         }, function() {
/*    37 */           h1("EtherCalc");
/*    38 */           h2("EtherCalc is a web spreadsheet.");
/*    39 */           p("Your data is saved on the web, and people can edit the same document at the same time. Everybody's changes are instantly reflected on all screens.");
/*    40 */           p("Work together on inventories, survey forms, list management, brainstorming sessions and more!");
/*    41 */           return div({
/*    42 */             id: "intro-links"
/*    43 */           }, function() {
/*    44 */             return a({
/*    45 */               id: "newpadbutton",
/*    46 */               href: "/new",
/*    47 */               alt: "Create Spreadsheet"
/*    48 */             }, function() {
/*    49 */               span("Create Spreadsheet");
/*    50 */               br("");
/*    51 */               return small("No sign-up, start editing instantly");
                        });
                      });
                    });
                  }
                });
/*    57 */     this.view({
/*    58 */       layout: function() {
/*    59 */         return html(function() {
/*    60 */           head(function() {
/*    61 */             title("EtherCalc");
/*    62 */             return link({
/*    63 */               href: "/start.css",
/*    64 */               rel: "stylesheet",
/*    65 */               type: "text/css"
                        });
                      });
/*    68 */           return body({
/*    69 */             id: "framedpagebody",
/*    70 */             class: "home"
/*    71 */           }, function() {
/*    72 */             div({
/*    73 */               id: "top"
/*    74 */             }, function() {
/*    75 */               return this.body;
                        });
/*    77 */             return a({
/*    78 */               href: "https://github.com/audreyt/ethercalc"
/*    79 */             }, function() {
/*    80 */               return img({
/*    81 */                 style: "z-order: 9999; position: absolute; top: 0; right: 0; border: 0",
/*    82 */                 src: "//a248.e.akamai.net/assets.github.com/img/7afbc8b248c68eb468279e8c17986ad46549fb71/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67",
/*    83 */                 alt: "Fork me on GitHub"
                          });
                        });
                      });
                    });
                  }
                });
/*    90 */     this.on({
/*    91 */       broadcast: function() {
/*    92 */         var _this = this;
/*    93 */         return (function __1(_) {
                      var chat, cmdstr, ecell, emit, log, msg, room, snapshot, type, user, values, _ref;
                      var __frame = {
                        name: "__1",
                        line: 93
                      };
                      return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
/*    95 */             emit = function(data) {
/*    96 */               return _this.broadcast({
/*    97 */                 broadcast: data
                          });
                        };
/*   100 */             _ref = _this.data, room = _ref.room, msg = _ref.msg, user = _ref.user, ecell = _ref.ecell, cmdstr = _ref.cmdstr, type = _ref.type;
                        return (function __$__1(__break) {
/*   101 */               switch (type) {
/*   102 */               case "chat":
/*   102 */                 return db.rpush(("chat-" + room), msg, __cb(_, __frame, 10, 14, function __$__1() {
/*   103 */                   emit(_this.data);
/*   104 */                   return __break();
                            }, true));
                          case "ask.ecells":
                            return db.hgetall(("ecell-" + room), __cb(_, __frame, 14, 23, function ___(__0, __1) {
/*   106 */                   values = __1;
/*   106 */                   emit({
/*   107 */                     type: "ecells",
/*   107 */                     ecells: values,
/*   108 */                     room: room
/*   109 */                   });
/*   110 */                   return __break();
/*   111 */                 }, true));
                          case "my.ecell":
                            db.hset(("ecell-" + room), user, ecell);
                            return __break();
                          case "execute":
/*   114 */                 return db.rpush(("log-" + room), cmdstr, __cb(_, __frame, 25, 14, function __$__1() {
/*   114 */                   return db.bgsave(__cb(_, __frame, 26, 14, function __$__1() {
/*   115 */                     emit(_this.data);
                                return __break();
                              }, true));
/*   117 */                 }, true));
/*   117 */               case "ask.snapshot":
/*   118 */                 return db.get(("snapshot-" + room), __cb(_, __frame, 30, 25, function ___(__0, __2) {
/*   119 */                   snapshot = __2;
/*   120 */                   return db.lrange(("log-" + room), 0, -1, __cb(_, __frame, 31, 20, function ___(__0, __3) {
                                log = __3;
                                return db.lrange(("chat-" + room), 0, -1, __cb(_, __frame, 32, 21, function ___(__0, __4) {
                                  chat = __4;
                                  _this.emit({
/*   122 */                         broadcast: {
/*   122 */                           type: "log",
/*   123 */                           to: user,
/*   123 */                           room: room,
/*   124 */                           log: log,
/*   124 */                           chat: chat,
/*   125 */                           snapshot: snapshot
/*   125 */                         }
/*   126 */                       });
/*   127 */                       return __break();
/*   128 */                     }, true));
/*   129 */                   }, true));
/*   130 */                 }, true));
/*   131 */               case "stopHuddle":
/*   132 */                 return db.del(("log-" + room), __cb(_, __frame, 45, 14, function __$__1() {
/*   133 */                   return db.del(("chat-" + room), __cb(_, __frame, 46, 14, function __$__1() {
                                return db.del(("ecell-" + room), __cb(_, __frame, 47, 14, function __$__1() {
                                  return db.del(("snapshot-" + room), __cb(_, __frame, 48, 14, function __$__1() {
                                    emit(_this.data);
                                    return __break();
                                  }, true));
                                }, true));
                              }, true));
/*   137 */                 }, true));
/*   137 */                 default:
/*   138 */                 emit(_this.data);
/*   139 */                 return __break();
/*   140 */               };
/*   141 */             })(_);
/*   142 */           });
                    })(function() {
                    
                    });
                  }
                });
                this.include("player");
                this.get({
/*   144 */       "/:room": function() {
/*   145 */         return this.render({
                      room: {
                        layout: false
                      }
                    });
                  }
/*   147 */     });
                this.use("bodyParser");
                this.post({
                  "/:room": function() {
                    var room, _this = this;
/*   150 */         room = this.data.room;
/*   151 */         return db.set(("snapshot-" + room), this.snapshot, function(err) {
/*   152 */           return db.get(("snapshot-" + room), function(err, snapshot) {
/*   153 */             return _this.response.send("text", {
/*   154 */               "Content-Type": "text/plain"
/*   155 */             }, 201);
                      });
                    });
                  }
                });
/*   160 */     return this.view({
/*   161 */       room: function() {
/*   162 */         return coffeescript(function() {
/*   163 */           return window.location = ("/#" + window.location.pathname.replace(/.*\//, ""));
/*   165 */         });
/*   166 */       }
/*   167 */     });
/*   168 */   };
/*   169 */ }).call(this);
